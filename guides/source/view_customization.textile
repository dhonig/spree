h2. View Customization

View customization allows you to extend or replace any view within a Spree store and this guide explains the options available, including:

* Using Deface for view customization 
* Replacing entire view templates

Be sure to read the other customization methods available in the "Customization Overview":customization.html page.

endprologue.
h3. Using Deface

Deface is a standalone Rails 3 library that enables you to customize Erb templates without needing to directly edit the underlying view file. Deface allows you to use standard CSS3 style selectors to target any element (including Ruby blocks), and perform an action against all the matching elements.

For example if you wanted to add some content to the Checkout Registration template, which looks like:

<ruby>
# app/views/checkout/registration.html.erb

<%= render "shared/error_messages", :target => @user %>
<h2><%= t("registration")%></h2>
<div id="registration">
  <div id="account">
    <%= render :file => 'user_sessions/new' %>
  </div>
  <% if Spree::Config[:allow_guest_checkout] %>
    <div id="guest_checkout">
      ... content removed for brevity ..
    </div>
  <% end %>
</div></ruby>

You would define an override as follows:
  
<ruby>
Deface::Override.new(:virtual_path  => "checkout/registration",
            :insert_before => "div#registration",
            :text          => "<p>Registration is the future!</p>"
            :name          => "registration_future")</ruby>
</ruby>

This override **inserts** <code><p>Registration is the future!</p></code> **before** the div with the id of "registration".

h4. Available actions

Deface applies an __action__ to element(s) matching the supplied CSS selector. These actions are passed when defining a new override are supplied as the key while the CSS selector for the target element(s) is the value, for example:

<ruby>
  :remove => "p.junk"

  :insert_after => "div#wow p.header"

  :insert_bottom => "ul#giant-list"
</ruby>

Deface currently supports the following actions:

* <tt>:remove</tt> - Removes all elements that match the supplied selector
* <tt>:replace</tt> - Replaces all elements that match the supplied selector, with the content supplied.
* <tt>:insert_after</tt> - Inserts content supplied after all elements that match the supplied selector
* <tt>:insert_before</tt> - Inserts content supplied before all elements that match the supplied selector
* <tt>:insert_top</tt> - Inserts content supplied inside all elements that match the supplied selector, as the first child.
* <tt>:insert_bottom</tt> - Inserts content supplied inside all elements that match the supplied selector, as the last child.
* <tt>:set_attributes</tt> - Sets (or adds) attributes to all elements that match the supplied selector, expects :attributes option to be passed.

NOTE: Not all actions are applicable to all elements, for example <tt>:insert_top</tt> and <tt>:insert_bottom</tt> expects a parent element with children.

h4. Supplying content

Deface supports three options for supplying content to be used by an override:

* <tt>:text</tt> - String containing markup
* <tt>:partial</tt> - Relative path to a partial
* <tt>:template</tt> - Relative path to a template

NOTE: As Deface operates on the Erb source the content supplied to an override can include Erb, it is not limited to just HTML. You also have access to all variables accessible in the original Erb context.

h4. Targeting elements

While Deface allows you to use a large subset of CSS3 style selectors (as provided by Nokogiri), the majority of Spree's views have been updated to include a custom HTML attribute (<tt>data-hook</tt>), which is designed to provide consistent targets for your overrides to use.

As Spree views are changed over coming versions, the original html elements maybe edited or be removed. We will endeavour to ensure that data-hook / id combination will remain consistent within any single view file (where possible), thus making your overrides more robust and upgrade proof.

For example products/show.html.erb looks as follows:

<ruby>
<div data-hook="product_show">
  <% @body_id = 'product-details' %>
  <h1><%= accurate_title %></h1>

  <div id="product-images" data-hook="product_images">
    <div id="main-image" data-hook>
      <%= render 'image' %>
    </div>
    <div id="thumbnails" data-hook>
      <%= render 'thumbnails', :product => @product %>
    </div>
  </div>

  <div id="cart-form" data-hook="cart_form">
    <%= render 'cart_form' %>
  </div>
</div>
</ruby>

As you can see from the example above the <tt>data-hook</tt> can be present in a number of ways:

* On elements with **no** <tt>id</tt> attribute the <tt>data-hook</tt> attribute contains a value similar to what would be included in the <tt>id</tt> attribute.
* On elements with an <tt>id</tt> attribute the <tt>data-hook</tt> attribute does **not** normally contain a value.
* Occasionally on elements with an <tt>id</tt> attribute the <tt>data-hook</tt> will contain a value different from the elements id. This is generally to support migration from the old 0.60.x style of hooks, where the old hook names were converted into <tt>data-hook</tt> versions.

The suggested way to target an element is to use the <tt>data-hook</tt> attribute wherever possible, here are a few examples based on **products/show.html.erb** above:

<ruby>
  :replace => "[data-hook='product_show']"

  :insert_top => "#thumbnails[data-hook]"

  :remove => "[data-hook='cart_form']"
</ruby>

You can also use a combination of both styles of selectors in a single override to ensure maximum protection against changes:

<ruby>
  :insert_top => "[data-hook='thumbnails'], #thumbnails[data-hook]"
</ruby>

h4. Targeting ruby blocks

Deface evaluates all the selectors passed against the original erb view contents (and importantly not against the finished / generated HTML). In order for Deface to make ruby blocks contained in view parseable they are converted into a pseudo markup as follows:

Given the following Erb file:

<ruby>
<% if products.empty? %>
  <%= t(:no_products_found) %>
<% elsif params.key?(:keywords) %>
  <h3>
    <%= t(:products) %>
  </h3>
<% end %>
</ruby>

Would be seen by Deface as:

<html>
<code erb-silent> if products.empty? </code>
  <code erb-loud> t(:no_products_found) </code>
<code erb-silent> elsif params.key?(:keywords) </code>
  <h3>
    <code erb-loud> t(:products) </code>
  </h3>
<code erb-silent> end </code>

</html>

So you can target ruby code blocks with the same standard CSS3 style selectors, for example:

<ruby>
  :replace => "code[erb-loud]:contains('t(:products)')"

  :insert_before => "code[erb-silent]:contains('elsif')"
</ruby>

h4. View upgrade protection

To ensure upgrading between versions of Spree is as painless as possible, Deface supports an <tt>:original</tt> option that can contain a string of the original content that's being replaced. When Deface is applying the override it will ensure that the current source matches the value supplied and will output to the Rails application log if they are different.

These warnings are good indicator that you need to review the source and ensure your replacement is adequately replacing all the functionality provided by Spree, this will help reduce unexpected issues after upgrades.

Once you've reviewed the new source you can update the <tt>:original</tt> value to new source to clear the warning.

NOTE: Deface removes all whitespace from both the actual and <tt>:original</tt> source values before comparing, to reduce false warnings caused by basic whitespace differences.

h4. Organizing Overrides

The suggested method for organizing your overrides is to create a separate file for each override inside the **app/overrides** directory, naming each file the same as the **:name** specified within.

NOTE: Using this method will ensure your overrides are compatible with future theming developments (editor).

h4. More information on Deface

For more information and sample overrides please refer to it's "README":https://github.com/railsdog/deface file on Github.

You can also see how Deface internals work, and test selectors using the "Deface Test Harness":http://deface.heroku.com application.


h3. Template Replacements

Sometimes the customization required to a view are so substantial that using a Deface override seems impractical, Spree also supports the duplication of views within an application or extension that will completely replace the file of the same name in Spree.

To override any of Spreeâ€™s default views including those for the admin interface, simply create a file with the same filename in your app/views directory.

For example, to override the main layout, create the file YOUR_SITE_OR_EXTENSION/app/views/layouts/spree_application.html.erb

INFO: It's important to ensure you copy the correct version of a view into your application or extension, as copying a mismatched version could lead to hard to debug issues. We suggest using <tt>bundle show spree</tt> to get location of the Spree code your actually running and then copying the relevant file from there.

h4. Drawbacks of template replacements 

Whenever you copy an entire view into your extension or application you are adding a significant maintenance overhead to your application when it comes to upgrading to newer versions of Spree. When upgrading between versions you need to compare each template that's been replaced to ensure to replicate any changes from the newer Spree version in your locally copied version.

To this end we strongly suggest you use Deface to achieve the desired customizations wherever possible.
